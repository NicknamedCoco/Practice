server:
  port: 8401

spring:
  application:
    name: MySentinelService
  cloud:
    nacos:
      discovery:
        server-addr: 47.98.138.53:8849
      config:
        server-addr: 47.98.138.53:8849
    sentinel:
      transport:
        dashboard: localhost:8080
        port: 2346  #默认8719端口，假如被占用会自动从8719开始依次+1扫描，直到找到未被占用的端口
        clientIp: localhost   #port和clientIp指的是sentinel客户端，整合在微服务内部，结合下面可知，三个配置最好在同一台机器。
        #sentinel dashboard和sentinel客户端不再同一台机器无法访问

      #sentinel的持久化，这里是将nacos上的限流规则配置拉去下来，
      #而推送数据持久化到nacos上，要么自己去nacos上创建配置文件，写上json的限流规则，要么重写sentinel的某个类，用代码实现，复杂复杂
      datasource:
        flow:  #ds1指数据源
          nacos:
            server-addr: 47.98.138.53:8849
            dataId: ${spring.application.name}
            groupId: SENTINEL_GROUP
            data-type: json
            rule-type: flow #还可以是：degrade、authority、param-flow
      eager: false

#      filter:  #如果不配置filter，则sentinel监控controller的url只能监控一层
#        url-patterns: /**


management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    sentinel:
      enabled: true